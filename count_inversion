#include <bits/stdc++.h> 
long long merge(long long *arr,int s,int mid,int e)
{
    vector<int>temp;
    int left=s;
    int right=mid+1;
    long long count=0;
    while(left<=mid && right<=e)
    {
        if(arr[left]<=arr[right])
        {
            temp.push_back(arr[left]);
            left++;
        }
        else
        {
            temp.push_back(arr[right]);
            count+=mid-left+1;
            right++;
        }
        
    }
    while(left<=mid)
    {
        temp.push_back(arr[left++]);
    }
    while(right<=e)
    {
        temp.push_back(arr[right++]);
    }
    for(int i=s;i<=e;i++)
    {
        arr[i]=temp[i-s];
    }
    return count;
}
long long mergeSort(long long *arr,int s,int e)
{
    long long count=0;
    if(s>=e)
        return count;
    int mid=(s+e)/2;
    count+=mergeSort(arr, s, mid);
    count+=mergeSort(arr, mid+1,e);
    count+=merge(arr,s,mid,e);
    return count;
}
long long getInversions(long long *arr, int n)
{
    return mergeSort(arr,0,n-1);
}
